// Interactive Coin Price Selector
import fetch from 'node-fetch';
import * as readline from 'readline';

interface BinancePrice {
  symbol: string;
  price: string;
}

const popularCoins = [
  'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 
  'SOLUSDT', 'XRPUSDT', 'DOTUSDT', 'MATICUSDT',
  'AVAXUSDT', 'LINKUSDT', 'UNIUSDT', 'ATOMUSDT'
];

async function getPrice(symbol: string): Promise<void> {
  try {
    console.log(`üîÑ ƒêang l·∫•y gi√° ${symbol}...`);
    const url = `https://api.binance.com/api/v3/ticker/price?symbol=${symbol}`;
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json() as BinancePrice;
    console.log(`üí∞ ${symbol}: $${parseFloat(data.price).toLocaleString()}`);
    console.log(`üìä Gi√° ch√≠nh x√°c: ${data.price} USDT`);
  } catch (error) {
    console.error(`‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° ${symbol}. Coin c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói API.`);
  }
}

async function startCoinSelector(): Promise<void> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  console.log('üöÄ === COIN PRICE SELECTOR ===');
  console.log('');
  console.log('ü™ô Coins ph·ªï bi·∫øn:');
  console.log('  ', popularCoins.join(', '));
  console.log('');
  console.log('üí° V√≠ d·ª•: ETHUSDT, SOLUSDT, XRPUSDT');
  console.log('‚ö†Ô∏è  L∆∞u √Ω: Ph·∫£i c√≥ ƒëu√¥i USDT (VD: BTCUSDT kh√¥ng ph·∫£i BTC)');
  console.log('');

  const askForCoin = () => {
    rl.question('üîç Nh·∫≠p symbol coin (ho·∫∑c "exit" ƒë·ªÉ tho√°t): ', async (input) => {
      const symbol = input.trim().toUpperCase();
      
      if (symbol === 'EXIT' || symbol === 'QUIT') {
        console.log('üëã T·∫°m bi·ªát!');
        rl.close();
        return;
      }
      
      if (!symbol) {
        console.log('‚ùå Vui l√≤ng nh·∫≠p symbol coin.');
        askForCoin();
        return;
      }
      
      await getPrice(symbol);
      console.log('');
      askForCoin(); // Ti·∫øp t·ª•c h·ªèi
    });
  };

  askForCoin();
}

// Ch·∫°y interactive selector
startCoinSelector().catch(console.error);
